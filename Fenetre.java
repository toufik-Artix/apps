package win;

import java.awt.Color;
import java.awt.event.ActionEvent;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.LayoutStyle;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.List;



import jade.core.Profile;
import jade.core.ProfileImpl;
import jade.core.Runtime;
import jade.wrapper.AgentContainer;
import jade.wrapper.AgentController;

/**
 *
 * @author toufik
 */
public class Fenetre extends JFrame {

	private JButton addAgent = new JButton();
    private JButton addVille = new JButton();
    private JButton model1 = new JButton();
    private JButton model2 = new JButton();
    private JButton runAgent = new JButton();
    
    public static World wd = new World();
    public static PanelNegotiation pNegotiation = new PanelNegotiation();
    public static Environnement env = new Environnement();
    
	public static JLayeredPane layoutpane = new JLayeredPane();
   
    
    public Fenetre() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

    	
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        GroupLayout jLayeredPane1Layout = new GroupLayout(layoutpane);
        layoutpane.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 646, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        runAgent.setBackground(new Color(52, 73, 94));
        runAgent.setForeground(new Color(255, 255, 255));
        runAgent.setText("lanche Agent");
        runAgent.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                runAgentActionPerformed(evt);
            }
        });

        

        model2.setBackground(new Color(52, 73, 94));
        model2.setForeground(new Color(255, 255, 255));
        model2.setText("model Neg");//avec n√©gitiation
        model2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                model2ActionPerformed(evt);
            }
        });

        model1.setBackground(new Color(52, 73, 94));
        model1.setForeground(new Color(255, 255, 255));
        model1.setText("model SN");//sans negotiation
        model1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                model1ActionPerformed(evt);
            }
        });

        addVille.setBackground(new Color(52, 73, 94));
        addVille.setForeground(new Color(255, 255, 255));
        addVille.setText("Add Ville");
        addVille.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addVilleActionPerformed(evt);
            }
        });

        addAgent.setBackground(new Color(52, 73, 94));
        addAgent.setForeground(new Color(255, 255, 255));
        addAgent.setText("add Agent");
        addAgent.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addAgentActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(layoutpane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(runAgent, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE)
                            .addComponent(addAgent, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE)
                            .addComponent(addVille, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE))
                        .addComponent(model1, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE)
                        .addComponent(model2, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    )
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(runAgent, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addAgent, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addVille, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(model1, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(model2, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(layoutpane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runAgentActionPerformed(ActionEvent evt) {

	   	
    	ArrayList<AgentController> d = new ArrayList<>();
    	try{
            List<City> list = new ArrayList<>();
            list = env.cities;
            
            City[] villes = list.toArray(new City[0]);
            
            Runtime rt = Runtime.instance();
            rt.setCloseVM(true);
            Profile p = new ProfileImpl();
            AgentContainer container1 = rt.createMainContainer(p);
            AgentController rma = container1.createNewAgent("rma", "jade.tools.rma.rma", null);
            rma.start();
            
            AgentController agentAfficher = container1.createNewAgent("agentAfficher", "win.AgentAfficher", null);
            agentAfficher.start();
            
            AgentController agentAfficheModelNegotiation = container1.createNewAgent("agentAfficheModelNegotiation", "win.AgentAfficheModelNegotiation", null);
            agentAfficheModelNegotiation.start();
            
            City[] ct = env.listAgents.toArray(new City[0]);
            
            AgentController semissionnaire = container1.createNewAgent("semissionnaire", "win.Soumissionnaire03", new Object[] {villes,ct});
            semissionnaire.start();
            
            synchronized (villes) {  
            	for(int i=0;i<env.listAgents.size();i++){
            		 
                //	ct =removeAgent(env.listAgents.get(i));
            		synchronized (ct) {
            			d.add(container1.createNewAgent("agent"+i, "win.AgAgent",new Object[] {villes, i,  ct} ));
            		}
                }
                for(int i=0;i<env.listAgents.size();i++){
                	d.get(i).start();
                }
            }
            
   
        }catch(Exception e) {
            e.printStackTrace();
        }
    	
    }

   

    private void model2ActionPerformed(ActionEvent evt) {
    	chagepane(pNegotiation);
    }

    private void model1ActionPerformed(ActionEvent evt) {
    	chagepane(wd);
    }

    private void addVilleActionPerformed(ActionEvent evt) {
    	env.w = 1; 
    	chagepane(env);
    }

    private void addAgentActionPerformed(ActionEvent evt) {
    	env.w = 2; 
    	chagepane(env);
    }

    
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Fenetre.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Fenetre.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Fenetre.class.getName()).log(Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Fenetre.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            	Fenetre fenetre = new Fenetre();
            	chagepane(env);
            	fenetre.setVisible(true);
                
            }
        });
    }

    public static void chagepane(JPanel pn) {

    	layoutpane.setBounds(5, 5, 646, 500);
    	layoutpane.removeAll();
    	layoutpane.add(pn);
    	layoutpane.repaint();
    	layoutpane.revalidate();
    	
    }
}
